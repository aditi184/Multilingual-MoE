# Tango settings file
#
# See https://ai2-tango.readthedocs.io/en/latest/api/settings.html
# for a list and description of all available fields.

# Define the workspace to use (where results will be stored).
# ‚ùóNOTE: The Beaker executor (see below) requires a "remote workspace", such
# as the Beaker workspace (used here), the Weights & Biases workspace, or the "local" workspace with
# a directory on an NFS drive.
# If you go with the local NFS workspace approach, you'll need to ensure the NFS drive
# is mounted to the Docker containers for your steps (see below).
workspace:
  type: "gs"
  workspace: "akshitab-eval-test"
  project: "ai2-allennlp"

# Define the executor to use (how steps will be run).
executor:
  type: beaker
  beaker_workspace: ai2/akshitab_llm
  # See https://github.com/allenai/docker-images/pkgs/container/pytorch
  # for a list of all available pytorch images.
  # docker_image: ghcr.io/allenai/pytorch:1.12.0-cuda11.3-python3.9
  # You probably want to leave this as 'base' unless you have your own image
  # that already has a conda environment under a different name.
  # TODO: create a docker image with tango and catwalk installed
  venv_name: base
  # The scheduler determines where to run your steps on Beaker, the compute resources
  # to allocate to them, and what priority they should be run at.
  scheduler:
    # TODO: parallelism, gpu resources.
    type: simple
    priority: preemptible
    clusters:
      # Add your own team's clusters here üëá
      - ai2/general-cirrascale
      - ai2/allennlp-cirrascale
  allow_dirty: true
  install_cmd: "pip install --upgrade pip; pip install -r requirements.txt; pip install -r evaluation/requirements.txt; pip install 'ai2-tango[gs,beaker] @ git+https://github.com/allenai/tango.git@main';"
  datasets:
    - source:
        host_path: /net/nfs.cirrascale
      mount_path: /net/nfs.cirrascale
  env_vars:
    - name: "HF_DATASETS_CACHE"
      value: "/net/nfs.cirrascale/aristo/oyvindt/hf_datasets_cache"

  #parallelism: 2


# This tells Tango where to look for your custom step classes and other registrable classes.
# Each item in the list can be a path to a directory or Python file, or a Python
# module name (e.g. 'my_package.steps').
#include_package:
#   It's not strictly necessary to list Python files / modules here that are in
#   the same directory that you're going to call the 'tango run' command from, since
#   Tango will automatically search files in the working directory to find steps.
#  - evaluation/steps/get_model.py

# Adjust the log level as you want. "info" is probably a good place to start.
log_level: info